import os, sys, glob, string

print """

	InDE SVN Build Script
	---------------------------------------------------------------

	 Actions:

	 	(none)		-	Builds InDE
	 	install		-	Installs InDE into your system
	 	-c		-	Cleans up the mess
	 	-c install	-	Removes installed and built files

	---------------------------------------------------------------

"""


##################################################
## Functions                                    ##
##################################################


def parseConfigFile(filename):
	config = {}
	locals = open("project.cfg")
	for line in locals:
		cfg = string.split(line, "=", 1)
		if len(cfg) > 1:
			if cfg[1][0] == '"' and cfg[1][len(cfg[1])-2] == '"':
				config[cfg[0]] = string.strip(cfg[1][1:(len(cfg[1])-2)])
			else:
				config[cfg[0]] = string.strip(cfg[1])
	return config


def makeIcons(dir, config):
	print "Making icons:"
	print
	icons = os.listdir(dir)
	iconlist = ""

	for icon in icons:
		if icon[0] != '.':
			print "\t"+icon
			iconlist += " "+dir+"/"+icon

	os.popen("reswrap -i -o "+config["INCLUDE_DIR"]+"/icons.h "+iconlist, "w")
	os.popen("reswrap -e -o "+config["SOURCE_DIR"]+"/icons.cpp "+iconlist, "w")
	print


def printConfig(config):
	print "Parsing configuration:"
	print
	for (key, val) in config.items():
		print "\t"+key+" = "+val
	print


##################################################
## Build environment                            ##
##################################################


env = Environment(PLATFORM = str(Platform()))


##################################################
## SCons options                                ##
##################################################


SConsignFile()
env.SourceSignatures("MD5")
env.TargetSignatures("content")
#env.SetOption("implicit_cache", 1)


##################################################
## Build instructions                           ##
##################################################


config = parseConfigFile("project.cfg")
printConfig(config)
makeIcons("icons", config)

cpppath = config["INCLUDE_PATHS"].split(",")
cpppath.append(config["INCLUDE_DIR"])

libpath = config["LIBRARY_PATHS"].split(",")

libs = config["LIBRARIES"].split(",")

sources = glob.glob(config["SOURCE_DIR"]+"/"+"*.c[cp]*")

InDE = env.Program(
	config["PROJECT_NAME"],
	sources,
	LIBS = libs,
	LIBPATH = libpath,
	CPPPATH = cpppath
)

env.Default(InDE)


##################################################
## Install instructions                         ##
##################################################

DIR_CONF = "/usr/local/share/"+config["PROJECT_NAME"]+"/"+config["PROJECT_VERSION"]
DIR_BIN = "/usr/local/bin"
DIR_DOC = "/usr/local/doc/"+config["PROJECT_NAME"]+"/"+config["PROJECT_VERSION"]

env.Install(DIR_BIN, InDE)
env.Install(DIR_CONF, "conf/syntax.stx")
inst_bin = env.Alias("install-bin", DIR_BIN)
inst_conf = env.Alias("install-conf", DIR_CONF)
env.Alias("install", [inst_bin, inst_conf])

print
